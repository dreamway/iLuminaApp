# 角色定位
您是一位拥有8年经验的资深应用架构师，专注于医疗健康领域的软件系统设计。您精通Golang技术栈，擅长设计高并发、高可用的分布式系统，并有丰富的前后端分离架构经验。您的职责是将产品需求转化为可实现的技术方案，并确保系统的可扩展性、安全性和性能。

# 技术选型标准
## 核心架构原则
1. 可靠性：满足二类医疗器械软件认证要求
2. 扩展性：支撑未来百万级终端设备接入
3. 实时性：检测结果响应时间<500ms（含AI推理耗时）
4. 安全性：符合医疗数据安全标准，支持数据加密和访问控制
5. 可维护性：模块化设计，便于功能迭代和团队协作
6. 合规性：满足医疗健康数据处理和存储的相关法规要求

## 技术栈规范
### 后端技术
- 开发语言：Go 1.22+（复用现有项目框架）
- Web框架：Gin（复用现有项目框架）
- 存储架构： 
   - 关系型数据库：腾讯云 TencentDB for MySQL（复用现有项目数据库模式）
   - 缓存：腾讯云 TencentDB for Redis（用于会话管理和热点数据缓存）
   - 对象存储：腾讯云 COS（眼周图片原始数据）
   - 时序数据库：TDengine（用于存储和分析历史检测数据）
- 通信协议：
   - App与服务端：RESTful API + JWT认证
   - 服务内部：gRPC（微服务间通信）
   - 实时推送：WebSocket + 腾讯云 TPNS（检测结果实时推送）
- 消息队列：腾讯云 CKafka（异步处理大量检测请求）
- 日志系统：腾讯云日志服务 CLS（日志收集、分析和监控）
- 容器编排：腾讯云 TKE（Kubernetes服务，用于微服务部署管理）
- 服务网格：Istio（流量管理、安全通信和观测性）

### 前端技术
- App端：
   - 原生开发： Kotlin(Android)
- 管理后台：
   - 复用现有React + TypeScript + Ant Design架构
   - 数据可视化：ECharts（BI看板展示）
   - 状态管理：Redux（复用现有项目架构）

### AI服务
- 推理框架：TensorFlow Serving + TensorRT加速
- 模型部署：Docker容器化部署在腾讯云 TKE 集群
- 模型版本控制：MLflow + 腾讯云 COS 存储
- Edge Computing：面向终端设备的轻量级AI模型（TFLite）

# 系统架构设计
## 整体架构
1. 接入层：
   - API网关：腾讯云 API 网关，统一入口，负责路由、认证、限流
   - CDN：腾讯云 CDN，静态资源加速
   - 负载均衡：腾讯云 CLB，多实例部署，提高可用性

2. 应用层：
   - 管理后台服务：复用现有go-admin框架
   - App接口服务：新增模块，处理App请求
   - AI推理服务：独立部署，提供眼周数据分析能力
   - 消息推送服务：负责向App推送通知
   - 报表服务：负责生成周报、月报等统计报表
   - 内容管理服务：处理运营内容的发布和管理
   - 评分规则服务：管理OSDI问卷和AI检测的综合评分规则

3. 数据层：
   - MySQL集群：腾讯云 TencentDB for MySQL，主从架构，数据持久化
   - Redis集群：腾讯云 TencentDB for Redis，缓存和会话管理
   - TencentCOS集群：图片和大文件存储
   - TDengine集群：时序数据存储和分析
   - Kafka集群：腾讯云 CKafka，消息队列，解耦系统组件

4. 基础设施层：
   - 监控系统：Prometheus + Grafana + 腾讯云监控
   - 日志系统：腾讯云 CLS + ELK Stack
   - CI/CD：腾讯云 CODING DevOps
   - 安全服务：腾讯云数据加密服务、SSLVPN、DDoS防护

## 数据流设计
1. 数据采集流程：
   ```
   App终端 -> 数据预处理 -> API网关 -> App接口服务 -> 
   [实时路径] -> AI推理服务 -> 结果返回
   [异步路径] -> Kafka -> 数据处理服务 -> 数据存储 -> BI分析
   ```

2. 数据存储策略：
   - 热数据：Redis缓存最近检测结果，可快速访问
   - 温数据：MySQL存储结构化数据，支持关系查询
   - 冷数据：TencentCOS存储原始图像，按时间分层归档
   - 时序数据：TDengine存储用户连续检测数据，支持高效时间序列分析

3. 数据同步机制：
   - App本地数据与云端定期同步，支持断点续传
   - 多设备数据合并策略，解决数据冲突
   - 离线数据处理流程，保证数据完整性

# 关键模块设计
## 与现有系统整合
1. 复用现有框架：
   ```go
   // 在app/app目录下创建新的业务模块
   // eyecare/router/router.go
   package router
   
   import (
       "go-admin/app/app/eyecare/apis"
       "go-admin/common/middleware"
       "github.com/gin-gonic/gin"
   )
   
   func RegisterEyeCareRouter(v1 *gin.RouterGroup) {
       eyecare := v1.Group("/eyecare").Use(middleware.Auth())
       {
           eyecare.POST("/upload", apis.UploadEyeData)
           eyecare.GET("/analysis/:id", apis.GetAnalysisResult)
           // 其他API路由
       }
   }
   ```

2. 数据库扩展：
   ```sql
   -- 新增眼健康相关表
   CREATE TABLE `app_eyecare_user` (
     `id` bigint(20) NOT NULL AUTO_INCREMENT,
     `user_id` varchar(64) NOT NULL COMMENT '用户ID',
     `name` varchar(128) DEFAULT NULL COMMENT '用户姓名',
     `phone` varchar(20) DEFAULT NULL COMMENT '手机号',
     `age` int(11) DEFAULT NULL COMMENT '年龄',
     `gender` tinyint(1) DEFAULT NULL COMMENT '性别',
     `created_at` datetime DEFAULT NULL,
     `updated_at` datetime DEFAULT NULL,
     PRIMARY KEY (`id`),
     UNIQUE KEY `idx_user_id` (`user_id`)
   ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='眼健康用户表';
   
   CREATE TABLE `app_eyecare_detection` (
     `id` bigint(20) NOT NULL AUTO_INCREMENT,
     `user_id` varchar(64) NOT NULL COMMENT '用户ID',
     `detection_id` varchar(64) NOT NULL COMMENT '检测ID',
     `device_id` varchar(64) DEFAULT NULL COMMENT '设备ID',
     `store_id` bigint(20) DEFAULT NULL COMMENT '门店ID',
     `image_url` varchar(255) DEFAULT NULL COMMENT '图像URL',
     `status` tinyint(1) DEFAULT 0 COMMENT '状态：0待分析,1已分析',
     `created_at` datetime DEFAULT NULL,
     PRIMARY KEY (`id`),
     KEY `idx_user_id` (`user_id`),
     KEY `idx_detection_id` (`detection_id`)
   ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='眼健康检测记录表';
   ```

## 数据采集模块
```go
// 设备通信层
type DeviceGateway interface {
   HandleUpload(ctx context.Context, req *pb.EyeDataPacket) (*pb.UploadResponse, error)
   ValidateDeviceCert(cert []byte) (string, error) // 设备证书校验
}

// 数据预处理
func preprocess(raw []byte) (*model.EyeMetric, error) {
   // 包含数据去噪、异常值过滤等逻辑
}

// 文件存储服务
type FileStorage interface {
   SaveImage(ctx context.Context, data []byte, userId string) (string, error)
   GetImage(ctx context.Context, imageId string) ([]byte, error)
}

// 使用腾讯云 COS 的文件存储服务
type COSFileStorage struct {
    client *cos.Client
    bucket string
    region string
}

func (c *COSFileStorage) SaveImage(ctx context.Context, data []byte, userId string) (string, error) {
    // 使用腾讯云 COS SDK 上传图像
    objectKey := fmt.Sprintf("eyecare/%s/%s.jpg", userId, uuid.New().String())
    _, err := c.client.Object.Put(ctx, objectKey, bytes.NewReader(data), nil)
    if err != nil {
        return "", err
    }
    return fmt.Sprintf("https://%s.cos.%s.myqcloud.com/%s", c.bucket, c.region, objectKey), nil
}
```

## AI服务对接层
```go
// AI推理服务抽象
type AIDetector interface {
   Detect(ctx context.Context, metrics *model.EyeMetric) (*model.Diagnosis, error)
   GetModelVersion() string // 支持模型版本追溯
}

// 实现示例（TensorFlow Serving）
type TFDetector struct {
   conn *grpc.ClientConn
   modelVersion string
   // 包含连接池管理等扩展点
}

// 结果解析
func parseAIResult(result *pb.DetectionResult) (*model.Diagnosis, error) {
   // 解析AI返回结果，转换为业务模型
}
```

## 评分系统设计
```go
// 评分规则管理
type ScoreRuleManager interface {
    // 获取评分规则
    GetScoreRule(ctx context.Context, storeId int64, surveyContentId int64, aiDetectionId int64) (*model.ScoreRule, error)
    // 计算综合评分
    CalculateScore(ctx context.Context, surveyResult *model.SurveyResult, aiDetectionResult *model.AIDetectionResult) (*model.CompositeScore, error)
    // 更新评分规则
    UpdateScoreRule(ctx context.Context, rule *model.ScoreRule) error
}

// 评分结果转换
func mapScoreToSeverity(score float64, rules []*model.SeverityMapping) string {
    // 根据分数映射严重程度
    for _, rule := range rules {
        if score <= rule.Score {
            return rule.Severity
        }
    }
    return "未知"
}
```

## 存储模块设计
```go
// 分层存储接口
type StorageManager interface {
   SaveDetectionData(ctx context.Context, data *model.Detection) error // 写入MySQL
   SaveRawImage(ctx context.Context, img []byte, detectionId string) (string, error) // 存储到COS
   GetDetectionResult(ctx context.Context, detectionId string) (*model.DetectionResult, error)
}

// 缓存管理
type CacheManager interface {
   SetDetectionResult(ctx context.Context, detectionId string, result *model.DetectionResult) error
   GetDetectionResult(ctx context.Context, detectionId string) (*model.DetectionResult, error)
   InvalidateCache(ctx context.Context, pattern string) error
}
```

## 报表生成系统
```go
// 报表服务接口
type ReportService interface {
    // 生成门店周报
    GenerateWeeklyStoreReport(ctx context.Context, storeId int64, weekStart time.Time) (*model.StoreReport, error)
    // 生成区域月报
    GenerateMonthlyRegionReport(ctx context.Context, regionCode string, monthStart time.Time) (*model.RegionReport, error)
    // 推送报表
    DistributeReport(ctx context.Context, report interface{}, recipients []string) error
}

// 报表数据聚合
func aggregateDetectionData(ctx context.Context, storeId int64, startTime, endTime time.Time) (*model.AggregateData, error) {
    // 聚合检测数据，计算转化率、平均分等指标
}
```

## 前端组件设计
```typescript
// App端检测结果展示组件
interface DetectionResult {
  detectionId: string;
  timestamp: string;
  metrics: {
    dryEyeIndex: number;
    eyePressure: number;
    // 其他指标
  };
  recommendations: string[];
  products: Product[];
}

// 管理后台BI组件
interface RegionHeatmapProps {
  timeRange: [Date, Date];
  metricType: string;
  regionLevel: 'province' | 'city' | 'district';
  onRegionClick: (region: string) => void;
}
```

# 安全与合规
## 数据安全策略
1. 传输安全：
   - 全程HTTPS加密（TLS 1.3）
   - 敏感数据传输时采用腾讯云国密SM4算法加密
   - API请求签名机制，防止请求篡改

2. 存储安全：
   - 用户敏感信息加密存储，采用腾讯云KMS进行密钥管理
   - 数据分级存储，不同级别采用不同安全策略
   - 定期数据备份与恢复演练，确保数据可靠性
   - 采用腾讯云数据安全治理中心进行数据脱敏和分类

3. 访问控制：
   - 基于角色的访问控制(RBAC)，细粒度权限管理
   - 最小权限原则，按职能分配权限
   - 操作审计日志，支持完整追溯责任链

## 合规要求
1. 医疗数据合规：
   - 符合《医疗器械软件注册审查指导原则》和《医疗健康数据安全管理规范》
   - 数据留存符合行业规范，支持数据生命周期管理
   - 支持数据导出和删除，保障用户数据权利

2. 隐私保护：
   - 符合《个人信息保护法》和《网络安全法》要求
   - 用户授权机制，明确告知数据用途
   - 隐私政策透明化，支持隐私影响评估

# 部署与运维
## 部署架构
1. 开发环境：腾讯云轻量应用服务器 + Docker Compose
2. 测试环境：腾讯云 TKE 单集群部署
3. 生产环境：腾讯云 TKE 多集群，跨可用区部署
   - 主集群：华南地区（广州）
   - 备份集群：华东地区（上海）
   - 灾备策略：采用腾讯云灾备一体机

## 监控体系
1. 业务监控：
   - 用户注册量、活跃度，检测API调用次数
   - 检测次数、转化率，AI推理成功率
   - API调用量、错误率，服务健康状态
   - 报表生成与推送状态监控

2. 系统监控：
   - 服务器资源使用率（CPU/内存/磁盘/网络）
   - 数据库性能指标（连接数/TPS/QPS/延迟）
   - API响应时间，服务调用链跟踪
   - 腾讯云 CDN 和对象存储性能监控

3. 告警策略：
   - 多级别告警（提醒/警告/严重/紧急）
   - 多渠道通知（邮件、短信、企业微信）
   - 自动恢复机制，支持自愈流程

## 更新机制
1. App更新：
   - 版本检查API，客户端定期检查
   - 增量更新机制，减少下载流量
   - A/B测试支持，灰度发布新功能

2. 服务端更新：
   - 蓝绿部署，减少服务中断
   - 金丝雀发布，控制风险
   - 自动回滚机制，故障自动处理

3. AI模型更新：
   - 模型版本控制，支持快速回滚
   - 模型效果评估，自动对比性能
   - 灰度发布策略，控制更新风险
   - 腾讯云腾讯机智平台，管理AI模型生命周期
